[build-system]
# Defined by PEP 518
requires = ["setuptools>=77.0.3", "setuptools_scm>=8"]
# Defined by PEP 517
build-backend = "setuptools.build_meta"


[project]
authors = [{ name = "GeoVista Contributors", email = "geovista.pub@gmail.com" }]
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering :: Atmospheric Science",
]
description = "Cartographic rendering and mesh analytics powered by PyVista"
dynamic = ["dependencies", "optional-dependencies", "readme", "version"]
keywords = [
  "cartography",
  "curvilinear",
  "earth-science",
  "grid",
  "mesh",
  "python",
  "pyvista",
  "rectilinear",
  "ugrid",
  "unstructured",
  "vtk",
]
license = "BSD-3-Clause"
license-files = ["LICENSE"]
name = "geovista"
requires-python = ">=3.11"


[project.urls]
Code = "https://github.com/bjlittle/geovista"
Discussions = "https://github.com/bjlittle/geovista/discussions"
Documentation = "https://geovista.readthedocs.io"
Issues = "https://github.com/bjlittle/geovista/issues"


[project.scripts]
geovista = "geovista.cli:main"


[tool.check-manifest]
ignore = ["src/geovista/_version.py"]


[tool.codespell]
ignore-words-list = "whet,projets"
skip = ".git,*.css,*.ipynb,*.js,*.html,*.map,*.po,CODE_OF_CONDUCT.md"


[tool.mypy]
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
exclude = []
files = ["src/geovista"]
strict = true
warn_unreachable = true


[[tool.mypy.overrides]]
# Problem caused by the click module - out of our control.
disallow_untyped_decorators = false
module = "geovista.cli"


[[tool.mypy.overrides]]
# Subclassing third-party classes - out of our control.
disallow_subclassing_any = false
module = ["geovista.geoplotter", "geovista.qt", "geovista.report"]


[tool.numpydoc_validation]
checks = [
  "all", # Enable all numpydoc validation rules, apart from the following:

  # -> Docstring text (summary) should start in the line immediately
  #    after the opening quotes (not in the same line, or leaving a
  #    blank line in between)
  "GL01", # Permit summary line on same line as docstring opening quotes.

  # -> Closing quotes should be placed in the line after the last text
  #    in the docstring (do not close the quotes in the same line as
  #    the text, or leave a blank line between the last text and the
  #    quotes)
  "GL02", # Permit a blank line before docstring closing quotes.

  # -> Double line break found; please use only one blank line to
  #    separate sections or paragraphs, and do not leave blank lines
  #    at the end of docstrings
  "GL03", # Ignoring.

  # -> See Also section not found
  "SA01", # Not all docstrings require a "See Also" section.

  # -> No extended summary found
  "ES01", # Not all docstrings require an "Extended Summary" section.

  # -> No examples section found
  "EX01", # Not all docstrings require an "Examples" section.

  # -> No Yields section found
  "YD01", # Not all docstrings require a "Yields" section.
]
exclude = ['\.__eq__$', '\.__hash__$', '\.__ne__$', '\.__repr__$']


[tool.pytest.ini_options]
addopts = [
  "--doctest-continue-on-failure",
  "--doctest-modules",
  "--durations=10",
  "--import-mode=importlib",
  "--strict-config",
  "--strict-markers",
  "-rfEs",
  "-v",
]
doctest_optionflags = "NORMALIZE_WHITESPACE ELLIPSIS NUMBER"
filterwarnings = [
  "error",
  "ignore::cartopy.io.DownloadWarning",
  "ignore:geovista unable to remesh 1 cell:UserWarning",
  "ignore:numpy.ndarray size changed:RuntimeWarning",
  "ignore:pyvista test cache image dir:UserWarning",
  "ignore:pyvista test generated image dir:UserWarning",
]
image_cache_dir = "tests/plotting/image_cache" # pytest-pyvista option
log_cli = true
log_cli_level = "INFO"
markers = ["example: gallery image tests", "image: plotting image tests"]
minversion = "6.0"
required_plugins = "pytest-mock pytest_pyvista"
testpaths = "tests"
xfail_strict = true


[tool.repo-review]
ignore = [
  # https://learn.scientific-python.org/development/guides/style/#PC180
  "PC180", # Uses prettier.
]


[tool.ruff]
# Exclude the following, in addition to the standard set of exclusions.
# See https://docs.astral.sh/ruff/settings/#exclude for defaults.
extend-exclude = ["docs/src/generated"]
line-length = 88
src = [".github/scripts", "docs/src", "src", "tests"]


[tool.ruff.format]
docstring-code-format = true
preview = false


[tool.ruff.lint]
# Allow information-source (U+2139) which could be confused for "i".
allowed-confusables = ["ℹ"]
ignore = [
  # flake8-commas (COM)
  # https://docs.astral.sh/ruff/rules/#flake8-commas-com
  "COM812", # Trailing comma missing.
  "COM819", # Trailing comma prohibited.

  # pydocstyle (D)
  # https://docs.astral.sh/ruff/rules/undocumented-magic-method/
  "D105", # Missing docstring in magic method.

  # flake8-boolean-trap (FBT)
  # https://docs.astral.sh/ruff/rules/#flake8-boolean-trap-fbt
  "FBT002", # Boolean default positional argument in function definition.

  # flake8-fixme (FIX)
  # https://docs.astral.sh/ruff/rules/line-contains-todo/
  "FIX002", # Line contains TODO, consider resolving the issue.

  # flake8-implicit-str-concat (ISC)
  # https://docs.astral.sh/ruff/rules/single-line-implicit-string-concatenation/
  # NOTE: This rule may cause conflicts when used with "ruff format".
  "ISC001", # Implicitly concatenate string literals on one line.

  # pep8-naming
  # https://docs.astral.sh/ruff/rules/#pep8-naming-n
  "N806", # Variable name in function should be lowercase.
  "N999", # Invalid module name.

  # pandas-vet (PD)
  # https://docs.astral.sh/ruff/rules/#pandas-vet-pd
  "PD",

  # Pylint (PL)
  # https://docs.astral.sh/ruff/rules/#pylint-pl
  "PLR2004", # Magic value used in comparison, consider replacing with a constant.

  # flake8-bandit (S)
  # https://docs.astral.sh/ruff/rules/assert/
  "S101", # Use of assert detected.

  # flake8-todos (TD)
  # https://docs.astral.sh/ruff/rules/#flake8-todos-td
  "TD003", # Missing issue link on the line following this TODO.
]
preview = false
select = [
  "ALL",

  # pydocstyle (D)
  # https://docs.astral.sh/ruff/rules/multi-line-summary-first-line/
  "D212", # Multi-line docstring summary should start at the first line
]


[tool.ruff.lint.isort]
force-sort-within-sections = true
known-first-party = ["geovista"]
required-imports = ["from __future__ import annotations"]


[tool.ruff.lint.mccabe]
# TODO @bjlittle: refactor to reduce the complexity, if possible
max-complexity = 26


[tool.ruff.lint.pylint]
# TODO @bjlittle: refactor to reduce the complexity, if possible
max-args = 14
max-branches = 29
max-statements = 91


[tool.ruff.lint.per-file-ignores]
".github/scripts/*.py" = [
  # https://docs.astral.sh/ruff/rules/#flake8-boolean-trap-fbt
  "FBT001", # flake8-boolean-trap: Boolean-typed positional argument in function definition.
  # https://docs.astral.sh/ruff/rules/implicit-namespace-package/
  "INP001", # flake8-no-pep420: File is part of an implicit namespace package.
  # https://docs.astral.sh/ruff/rules/print/
  "T201", # flake8-print: print found.
]
"conftest.py" = [
  # flake8-annotations (ANN)
  # https://docs.astral.sh/ruff/rules/#flake8-annotations-ann
  "ANN001", # Missing type annotation for function argument.
  "ANN201", # Missing return type annotation for public function.
]
"src/geovista/cli.py" = [
  # https://docs.astral.sh/ruff/rules/#flake8-boolean-trap-fbt
  "FBT001", # flake8-boolean-trap: Boolean-typed positional argument in function definition.
  # https://docs.astral.sh/ruff/rules/print/
  "T201", # flake8-print: print found.
]
"src/geovista/examples/**/*.py" = [
  # https://docs.astral.sh/ruff/rules/typing-only-third-party-import/
  "TC002", # flake8-type-checking: Move 3rd-party import into a type checking block.
]
"src/geovista/examples/earthquakes.py" = [
  # https://docs.astral.sh/ruff/rules/line-too-long/
  "E501", # pycodestyle: Line too long.
]
"src/geovista/examples/earthquakes_wink1.py" = [
  # https://docs.astral.sh/ruff/rules/line-too-long/
  "E501", # pycodestyle: Line too long.
]
"src/geovista/examples/spatial_index/uber_h3.py" = [
  # https://docs.astral.sh/ruff/rules/#flake8-boolean-trap-fbt
  "FBT001", # flake8-boolean-trap: Boolean-typed positional argument in function definition.
]
# TODO @bjlittle: resolve use of typing.Any
"src/geovista/geoplotter.py" = [
  # https://docs.astral.sh/ruff/rules/#flake8-annotations-ann
  "ANN401", # flake8-annotations: Dynamically typed expressions (typing.Any).
]
"test_*.py" = [
  # flake8-annotations (ANN)
  # https://docs.astral.sh/ruff/rules/#flake8-annotations-ann
  "ANN001", # Missing type annotation for function argument.
  "ANN201", # Missing return type annotation for public funciton.
  # https://docs.astral.sh/ruff/rules/#flake8-self-slf
  "SLF001", # flake8-self: Private member accessed.
]
# TODO @bjlittle: investigate behaviour of commented-out failing test
"tests/core/test_slice_lines.py" = [
  # https://docs.astral.sh/ruff/rules/#eradicate-era
  "ERA001", # eradicate: Found commented-out code.
]


[tool.ruff.lint.pydocstyle]
convention = "numpy"


[tool.setuptools]
zip-safe = false


[tool.setuptools.dynamic]
dependencies = { file = ["requirements/pypi-core.txt"] }
readme = { file = "README.md", content-type = "text/markdown" }


[tool.setuptools.dynamic.optional-dependencies]
devs = { file = ["requirements/pypi-optional-devs.txt"] }
docs = { file = ["requirements/pypi-optional-docs.txt"] }
exam = { file = ["requirements/pypi-optional-exam.txt"] }
test = { file = ["requirements/pypi-optional-test.txt"] }


[tool.setuptools.packages.find]
include = ["geovista*"]
where = ["src"]


[tool.setuptools_scm]
local_scheme = "dirty-tag"
version_scheme = "release-branch-semver"
write_to = "src/geovista/_version.py"


[tool.towncrier]
directory = "changelog"
filename = "CHANGELOG.rst"
package = "geovista"
package_dir = "src"
template = "changelog/template.rst"

#
# the order here defines the rendered changelog order
#
[[tool.towncrier.type]]
# Removals and backward incompatible breaking changes.
directory = "breaking"
name = "💣 Breaking Changes"
showcontent = true

[[tool.towncrier.type]]
# Declaration of removals and backward incompatible changes.
directory = "deprecation"
name = "🔥 Deprecations"
showcontent = true

[[tool.towncrier.type]]
# New behaviours, capability, public API etc
directory = "feature"
name = "✨ New Features"
showcontent = true

[[tool.towncrier.type]]
# Updates to existing behaviours, including performance etc
directory = "enhancement"
name = "🚀 Enhancements"
showcontent = true

[[tool.towncrier.type]]
# Correction to undesired behaviours.
directory = "bugfix"
name = "🐛 Bug Fixes"
showcontent = true

[[tool.towncrier.type]]
# Package dependency removals, additions, pins etc
directory = "dependency"
name = "🔗 Dependencies"
showcontent = true

[[tool.towncrier.type]]
# Data, media and asset updates etc
directory = "asset"
name = "💽 Assets"
showcontent = true

[[tool.towncrier.type]]
# Notable changes to the documentation structure, content, render or build
directory = "documentation"
name = "📚 Documentation"
showcontent = true

[[tool.towncrier.type]]
# Miscellaneous internal and maintenance changes.
directory = "internal"
name = "💼 Internal"
showcontent = true

[[tool.towncrier.type]]
# Celebrate our awesome community members, including social changes.
directory = "community"
name = "🌱 Community"
showcontent = true

[[tool.towncrier.type]]
# Changes that affect contributors e.g., standards, conventions,
# running tests, building docs, environments, security etc
directory = "contributor"
name = "🛠️ Contributor Infrastructure"
showcontent = true

[[tool.towncrier.type]]
# Catch all for items that don't fit elsewhere.
directory = "misc"
name = "🧰 Miscellaneous"
showcontent = true

[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = ["linux-64"]

[tool.pixi.environments]
default = { features = [], solve-group = "default" }
devs = { features = ["devs"], solve-group = "default" }
docs = { features = ["devs", "docs"], solve-group = "default" }
geovista = { features = ["devs", "docs", "test"], solve-group = "default" }
test = { features = ["devs", "test"], solve-group = "default" }

devs-py311 = { features = ["devs", "py311"], solve-group = "py311" }
docs-py311 = { features = ["devs", "docs", "py311"], solve-group = "py311" }
geovista-py311 = { features = [
  "devs",
  "docs",
  "py311",
  "test",
], solve-group = "py311" }
py311 = { features = ["py311"], solve-group = "py311" }
test-py311 = { features = ["devs", "py311", "test"], solve-group = "py311" }

devs-py312 = { features = ["devs", "py312"], solve-group = "py312" }
docs-py312 = { features = ["devs", "docs", "py312"], solve-group = "py312" }
geovista-py312 = { features = [
  "devs",
  "docs",
  "py312",
  "test",
], solve-group = "py312" }
py312 = { features = ["py312"], solve-group = "py312" }
test-py312 = { features = ["devs", "py312", "test"], solve-group = "py312" }

devs-py313 = { features = ["devs", "py313"], solve-group = "py313" }
docs-py313 = { features = ["devs", "docs", "py313"], solve-group = "py313" }
geovista-py313 = { features = [
  "devs",
  "docs",
  "py313",
  "test",
], solve-group = "py313" }
py313 = { features = ["py313"], solve-group = "py313" }
test-py313 = { features = ["devs", "py313", "test"], solve-group = "py313" }

[tool.pixi.dependencies]
cartopy = ">=0.24.0,<0.25"
click = ">=8.2.1,<9"
click-default-group = ">=1.2.4,<2"
cmocean = ">=4.0.3,<5"
colorcet = ">=3.1.0,<4"
lazy_loader = ">=0.4,<0.5"
netcdf4 = ">=1.7.2,<2"
numpy = ">=2.2.6,<3"
platformdirs = ">=4.3.8,<5"
pooch = ">=1.8.2,<2"
pykdtree = ">=1.4.1,<2"
pyproj = ">=3.7.1,<4"
pyvista = ">=0.45.0,<0.46.0"
setuptools = ">=80.9.0,<81"
setuptools-scm = ">=8.3.1,<9"
vtk = ">=9.4.2,<9.5.0"

[tool.pixi.feature.devs.dependencies]
fastparquet = ">=2024.11.0,<2025"
h3-py = ">=4.2.2,<5"
pandas = ">=2.2.3,<3"
pre-commit = ">=4.2.0,<5"
rasterio = ">=1.4.3,<2"
ruff = ">=0.11.12,<0.13"
zizmor = ">=1.9.0,<2"

[tool.pixi.feature.devs.pypi-dependencies]
geovista = { path = ".", editable = true }

[tool.pixi.feature.devs.tasks]
fmt = "ruff format"
lint = "ruff check"

[tool.pixi.feature.docs.dependencies]
ipykernel = ">=6.29.5,<7"
ipywidgets = ">=8.1.7,<9"
joblib = ">=1.5.1,<2"
jupyter-server-proxy = ">=4.4.0,<5"
myst-nb = ">=1.2.0,<2"
nest-asyncio = ">=1.6.0,<2"
numpydoc = ">=1.8.0,<2"
pydata-sphinx-theme = "!=0.16.0,!=0.16.1,<0.16.2" # https://github.com/bjlittle/geovista/issues/1247
sphinx = ">=8.2.3,<9"
sphinx-autoapi = ">=3.5.0,<4"
sphinx-book-theme = ">=1.1.3,<2"
sphinx-click = ">=6.0.0,<7"
sphinx-copybutton = ">=0.5.2,<0.6"
sphinx-design = ">=0.6.1,<0.7"
sphinx-gallery = ">=0.19.0,<0.20"
sphinx-tags = ">=0.4,<0.5"
sphinx-togglebutton = ">=0.3.2,<0.4"
sphinx_changelog = ">=1.6.0,<2"
towncrier = ">=24.8.0,<25"
trame = "==3.9.0"
trame-client = ">=3.9.0,<4"
trame-server = ">=3.4.0,<4"
trame-vtk = "==2.8.15"
trame-vuetify = "==3.0.1"

[tool.pixi.feature.docs.pypi-dependencies]
sphinx-tippy = ">=0.4.3,<0.5"

[tool.pixi.feature.docs.tasks.clean]
cmd = "make clean"
cwd = "docs"

[tool.pixi.feature.docs.tasks.make]
args = [{ "arg" = "option", "default" = "html-noplot" }]
cmd = "make {{ option }}"
cwd = "docs"
depends-on = [{ "task" = "clean" }]

[tool.pixi.feature.docs.tasks.serve-html]
args = [{ "arg" = "option", "default" = "html-noplot" }]
cmd = "make serve-html"
cwd = "docs"
depends-on = [{ "task" = "make", "args" = ["{{ option }}"] }]

[tool.pixi.feature.py311.dependencies]
pip = ">=25.1.1,<26"
python = "3.11.*"

[tool.pixi.feature.py312.dependencies]
pip = ">=25.1.1,<26"
python = "3.12.*"

[tool.pixi.feature.py313.dependencies]
pip = ">=25.1.1,<26"
python = "3.13.*"

[tool.pixi.feature.test.dependencies]
codecov = ">=2.1.13,<3"
pytest = ">=8.4.0,<9"
pytest-cov = ">=6.1.1,<7"
pytest-mock = ">=3.14.1,<4"
pytest-pyvista = ">=0.1.9,<0.2"
