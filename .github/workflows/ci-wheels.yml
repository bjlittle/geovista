# Reference:
#   - https://github.com/actions/cache
#   - https://github.com/actions/checkout
#   - https://github.com/actions/download-artifact
#   - https://github.com/actions/upload-artifact
#   - https://github.com/conda-incubator/setup-miniconda
#   - https://github.com/pypa/build
#   - https://github.com/pypa/gh-action-pypi-publish
#   - https://test.pypi.org/help/#apitoken

name: ci-wheels

on:
  pull_request:
  
  push:
    branches-ignore:
      - "conda-lock-auto-update"
      - "pre-commit-ci-update-config"
      - "dependabot/*"


jobs:
  build-artifacts:
    name: "Build PyPI artifacts"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: "Build sdist/bdist"
      run: |
        # geovista is a pure python package, so simply use pypa/build
        pipx run build

    - name: "Show sdist/bdist"
      run: |
        ls -l ${{ github.workspace }}/dist

    - uses: actions/upload-artifact@v2
      with:
        name: pypi-artifacts
        path: ${{ github.workspace }}/dist


  test-artifacts:
    needs: [build-artifacts]
    name: "Test bdist with ${{ matrix.version }}"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    env:
      ENV_NAME: "ci-wheels"
    strategy:
      matrix:
        version: [py38, py39, py310]
    steps:
    - uses: actions/checkout@v3

    - name: "Environment configure"
      env:
        # Maximum cache period (in weeks) before forcing a cache refresh.
        CACHE_WEEKS: 2
      run: |
        echo "CACHE_PERIOD=$(date +%Y).$(expr $(date +%U) / ${CACHE_WEEKS})" >> ${GITHUB_ENV}

    - name: "Conda package cache"
      uses: actions/cache@v3
      env:
        # Increment the build number to force a cache refresh.
        CACHE_BUILD: 0
      with:
        path: ~/conda_pkgs_dir
        key: ${{ runner.os }}-conda-pkgs-${{ env.ENV_NAME }}-${{ matrix.version }}-p${{ env.CACHE_PERIOD }}-b${{ env.CACHE_BUILD }}

    - name: "Conda install"
      uses: conda-incubator/setup-miniconda@v2
      with:
        miniforge-version: latest
        channels: conda-forge,defaults
        activate-environment: ${{ env.ENV_NAME }}
        auto-update-conda: false
        use-only-tar-bz2: true

    - name: "Conda environment cache"
      id: conda-env-cache
      uses: actions/cache@v3
      env:
        # Increment the build number to force a cache refresh.
        CACHE_BUILD: 0
      with:
        path: ${{ env.CONDA }}/envs/${{ env.ENV_NAME }}
        key: ${{ runner.os }}-conda-env-${{ env.ENV_NAME }}-${{ matrix.version }}-p${{ env.CACHE_PERIOD }}-b${{ env.CACHE_BUILD }}

    - name: "Conda environment update"
      if: steps.conda-env-cache.outputs.cache-hit != 'true'
      run: |
        conda install --file ${{ github.workspace }}/requirements/locks/${{ matrix.version }}-lock-linux-64.txt

    - name: "Conda info"
      run: |
        conda info
        conda list

    - uses: actions/download-artifact@v2
      with:
        name: pypi-artifacts
        path: ${{ github.workspace }}/dist

    - name: "Install and import bdist"
      working-directory: ${{ github.workspace }}/dist
      run: |
        python -m pip install geovista-*.whl
        python -c "import geovista; print(f'Successfully imported geovista-{geovista.__version__}')"


  publish-artifacts-test-pypi:
    needs: [test-artifacts]
    name: "Publish to Test PyPI"
    runs-on: ubuntu-latest
    # upload to Test PyPI for every commit on main branch
    if: github.event_name == 'push' && github.event.ref == 'refs/heads/main'
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: pypi-artifacts
        path: ${{ github.workspace }}/dist

    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
        skip_existing: true
        print_hash: true


  publish-artifacts-pypi:
    needs: [test-artifacts]
    name: "Publish to PyPI"
    runs-on: ubuntu-latest
    # upload to PyPI for every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: pypi-artifacts
        path: ${{ github.workspace }}/dist

    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        print_hash: true
